--- Basic Git Workflow ---
1. Clone Repository
2. Create Branch
3. Publish Branch
4 Do Your Stuffs
5. Add Your Changes
6. Commit Your Changes With Message
7. Switch to Master Branch
8. Update Master Branch with Remote
9. Switch Back to Own Branch
10. Merge Own Branch with Master
10.1 Scenario 1: No Conflict
10.2 Scenario 2: Conflict
11. Conflicts Resolved
12. Push to your Own Remote Branch
13. Create Pull Request
14. Wait for Approval
15. Merge Pull Request
16. 



--- Basic Git Workflow by ChatGPT ---
Creating a Repository:
To create a new Git repository, use the command: git init
To clone an existing repository, use the command: git clone <repository URL>
Adding and Committing Changes:
To add all changes in the current directory to the staging area, use the command: git add .
To add specific files to the staging area, use the command: git add <file>
To commit changes with a message, use the command: git commit -m "commit message"
Branching and Merging:
To create a new branch, use the command: git branch <branch name>
To switch to a different branch, use the command: git checkout <branch name>
To merge changes from one branch to another, use the command: git merge <branch name>
Viewing and Reverting Changes:
To view the status of your repository, use the command: git status
To view the changes made to a file, use the command: git diff <file>
To revert to a previous commit, use the command: git revert <commit ID>
Pushing and Pulling:
To push changes to a remote repository, use the command: git push <remote name> <branch name>
To pull changes from a remote repository, use the command: git pull <remote name> <branch name>
Resolving Merge Conflicts:
To view merge conflicts in a file, use the command: git diff
To abort a merge, use the command: git merge --abort
To manually resolve a conflict, edit the file with the conflict and then use the command: git add <file>
Remember that this is just a cheat sheet and not a complete guide. For more detailed information, refer to the Git documentation or seek help from the Git community.

--- Advanced Git Workflow by ChatGPT ---
Clone a Repository:
Navigate to the folder where you want to clone the repository
Run the command: git clone <repository URL>
Create a Feature Branch:
Run the command: git checkout -b feature/<feature name> to create a new feature branch and switch to it
Work on the Feature:
Make changes to the codebase and commit frequently using git add and git commit
Pull Changes from the Remote Repository:
Before pushing changes, pull any changes made by other team members to the remote repository using git pull to avoid merge conflicts
Rebase the Feature Branch:
To keep the feature branch up to date with the latest changes in the base branch, run the command: git rebase <base branch> while in the feature branch
Resolve Merge Conflicts:
If there are any merge conflicts, Git will prompt you to resolve them manually by editing the conflicting files
Use git add to stage the resolved files, and git rebase --continue to continue with the rebase process
Push Changes to the Remote Repository:
Once the feature is complete and all conflicts are resolved, push the feature branch to the remote repository using git push -u origin feature/<feature name>
Create a Pull Request:
Open a pull request on the remote repository to request that the feature branch be merged into the base branch
Reviewers can then review the changes and request further changes or approve the pull request
Merge the Feature Branch:
Once the pull request is approved, merge the feature branch into the base branch using git merge feature/<feature name> while in the base branch
Resolve any merge conflicts that may arise during the merge process
Push Changes to the Remote Repository:
Push the changes to the remote repository using git push
Remember to communicate with your team members frequently and use proper naming conventions for branches and commits. Additionally, use tools like GitLab, GitHub, or Bitbucket to manage your repositories and collaborate with others.

This workflow can help teams avoid merge conflicts, keep their codebase up to date, and ensure that features are properly reviewed and approved before being merged into the base branch.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Common issues that beginners may encounter when using Git:

Forgetting to initialize a repository:
When working on a new project, it's important to initialize a Git repository by running git init in the project's root directory. Without initializing a repository, Git won't track any changes made to the project files.

Adding unnecessary files to the repository:
It's important to only add necessary files to the Git repository. For example, files like build artifacts, temporary files, and log files should be excluded from the repository. Adding unnecessary files to the repository can make it bloated and difficult to work with.

Not committing changes regularly:
One of the most important aspects of using Git is committing changes regularly. If you don't commit changes regularly, it can become difficult to track the changes you've made over time. It's a good idea to commit changes whenever you complete a task or make a significant change to the project.

Not writing descriptive commit messages:
When committing changes, it's important to write descriptive commit messages that explain the changes you've made. This makes it easier for other developers to understand the changes you've made and why you made them.

Conflicts during merging:
When working on a project with multiple developers, it's common to encounter conflicts during merging. Conflicts occur when two developers make changes to the same file or code section. It's important to resolve conflicts as soon as possible to avoid issues down the line.

Accidentally deleting or modifying files:
Git makes it easy to modify or delete files within a project, but it's important to be careful when doing so. Accidentally deleting or modifying files can cause issues for other developers working on the project.

Pushing to the wrong branch:
When working with multiple branches, it's important to make sure you're pushing changes to the correct branch. Pushing changes to the wrong branch can cause issues with the project's history and make it difficult to track changes over time.

These are just a few of the issues that beginners may encounter when using Git. The best way to avoid these issues is to be careful and deliberate when working with Git, and to ask for help when needed.

-- Back Story--

1. A group of friends is planning a trip.
2. Text files containing the itinerary for the trip is created by the person setting up the repository. (Create, Init)

Creating branches, push, pull, commit, stash, merge
- Friend A has trouble deciding on the plan and needs help from someone. Friend B decides to help but... (add in the possible issues)
    - Forget to pull
    - Work on the same branch.
    

- Friend C and D are tasked to decide on food choices. (possible issues for conflicts)
    - Branch out from same head then merge

- After having multiple issues with git, they decide to implement pull request.

A group of friends decided to plan for a trip. They have decided to use Git to plan for their trip. In order to do so, they would need to have the following setup required.:
1. 

The leader of this trip create a repository to store all the requirwed itenary of their
..
.
.
.
.


1. back Story
Setup
    1. Create Remote Repo ()
    2. Add Collaborator ()
    3. Create Local Repo 
    4. Initial Commits (Create Initial Files for Repo)
        i. Most Basic File Structure
        ii File Structure for this Back Story
        iii git add, git commit -m "message", git push
    5. Link Local Repo to Remote Repo
    6. Clone Repo to Local Device
    7. Start Collaborating
        i. git checkout -b
        ii Do your Stuffs
    8. Collaborating
        i Issues Faced


Task : Create repository (setup for trip) - Wai Tin
    - Learn how to create remote repositories

Task : Setup local repository and link to remote repo = Wai Tin
    - git init (done)
    - git remote add
    - git config (done)
    - git add , git commit (done)
    - git push

Task : Clone repo (for friends) - Wai Tin
    - main
    - learn how to clone repo


Task : Developer A updates itinerary - Xun
    - itinerary/activities
    - Friend A is tasked to come up with the itinerary for day 1.
    - He edits the text file for Day 1 itinerary and saved the file locally.
    - So in order to share it with the group, he has to "push" the updates into the repository. (git push)

Task : A and B updates same itinerary - Xun
    - Friend A edits text file for Day 1 itinerary. While planning the schedule,
      he has difficulty choosing between one of the two places.
    - Friend B decides to help, so he checkout friend A's branch.                               (git checkout)
    - Both of them ended up working in the same branch, on the same file.
    - Friend B finished editing the file and pushes the edit.                                   (git push)
    - At the same time, friend A also made some changes to the file and pushes the edit.        (git push)
    - Conflict happens depending on who pushed later.                                           (conflict )    


Task : A modified text file and B deleted text file - Bao Jin
    - conflict within same branch (add/remove file conflict)

Task : A and B update food on different branch - Bao Jin
    - food/locations
    - conflict when merging branches

Task: Pull request from
    - pull request itinerary/activities -> main , food/locations -> main


